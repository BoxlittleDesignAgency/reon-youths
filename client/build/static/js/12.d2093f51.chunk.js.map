{"version":3,"sources":["layout/UserDashboardLayout.js"],"names":["DashboardLayout","title","description","children","useState","profile","setProfile","setError","setLoading","useEffect","console","dir","getCurrentProfile","a","token","getCookie","log","config","headers","Authorization","axios","get","res","data","bio","city","country","dob","handle","location","status","skills","user","email","name","social","youtube","linkedin","kingschat","facebook","response","providerProfile","useMemo","Provider","value","className","id"],"mappings":"uSA4JeA,UAlIS,SAAC,GAKnB,EAJJC,MAII,EAHJC,YAGK,IAFLC,EAEI,EAFJA,SAEI,qDAG0BC,mBAAS,OAHnC,mBAGGC,EAHH,KAGYC,EAHZ,OAIsBF,mBAAS,IAJ/B,mBAIUG,GAJV,aAK0BH,oBAAS,GALnC,mBAKYI,GALZ,WAOJC,qBAAU,WACRC,QAAQC,IAAI,uBACX,CAACN,IAEJI,qBAAU,WAENG,MAED,IAEH,IAAMA,EAAiB,uCAAG,kEAAAC,EAAA,6DAClBC,EAAQC,oBAAU,SACxBL,QAAQM,IAAI,qBAAsBF,GAFV,SAIhBG,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OAAYL,KAPP,SAWJM,IAAMC,IAAI,uBAAwBJ,GAX9B,OAWhBK,EAXgB,SAwBlBA,EAAIC,KAVNC,EAdoB,EAcpBA,IACAC,EAfoB,EAepBA,KACAC,EAhBoB,EAgBpBA,QACAC,EAjBoB,EAiBpBA,IACAC,EAlBoB,EAkBpBA,OACAC,EAnBoB,EAmBpBA,SACAC,EApBoB,EAoBpBA,OACAC,EArBoB,EAqBpBA,OArBoB,IAsBpBC,KAAQC,EAtBY,EAsBZA,MAAOC,EAtBK,EAsBLA,KAtBK,IAuBpBC,OAAUC,EAvBU,EAuBVA,QAASC,EAvBC,EAuBDA,SAAUC,EAvBT,EAuBSA,UAAWC,EAvBpB,EAuBoBA,SAG1C7B,QAAQM,IAAI,YAAaM,GAkBzBd,GAAW,GACXF,EAAW,2BACND,GADK,IAERmB,MACAC,OACAC,UACAC,MACAC,SACAC,WACAC,SACAC,SACAG,OACAD,QACAG,UACAC,WACAC,YACAC,cAGFhC,EAAS,IA/Da,kDAiEtBA,EAAS,KAAIiC,UACb9B,QAAQM,IAAI,eAAgB,KAAIwB,UAEhChC,GAAW,GACXF,EAAW,MArEW,0DAAH,qDAyEjBmC,EAAkBC,mBAAQ,iBAAO,CAAErC,UAASC,gBAAe,CAC/DD,EACAC,IAIF,OACE,kBAAC,gBAAD,KACE,kBAAC,iBAAeqC,SAAhB,CAAyBC,MAAOH,GAC9B,yBAAKI,UAAU,uBACb,kBAAC,UAAD,MACA,0BAAMC,GAAG,kBACP,kBAAC,IAAD,KACE,6BAASD,UAAU,aACjB,kBAAC,UAAD,CAAOA,UAAU,uBACf,kBAAC,UAAD,OAEF,kBAAC,UAAD,CAAMA,UAAU,gBAAgB1C,GAChC,kBAAC,UAAD,CAAO0C,UAAU,wBACf,kBAAC,UAAD,MACA,4BAAQA,UAAU,UAChB,yCAEF,kBAAC,UAAD,MACA,kBAAC,UAAD,CAAKD,MAAOvC","file":"static/js/12.d2093f51.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo, createContext } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport axios from 'axios';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nimport GlobalHeader from '../pages/shared/header/GlobalHeader';\n\nimport Main from '../dashboard/components/Main';\nimport RightContent from '../dashboard/components/RightContent';\nimport LeftContent from '../dashboard/components/LeftContent';\nimport Aside from '../dashboard/components/Aside';\nimport TopBar from '../dashboard/components/TopBar';\n\nimport '../dashboard/Dashboard.css';\n\nimport Log from '../pages/shared/Log';\n\nimport { getCookie } from '../pages/components/auth/helpers';\n\nimport { isAuthenticated } from '../pages/components/auth/helpers';\nimport { ProfileContext } from '../dashboard/components/context/ProfileContext';\n\nimport { StateProvider } from '../dashboard/components/context/store';\n\nconst DashboardLayout = ({\n  title = 'Title',\n  description = 'Description',\n  children,\n  ...rest\n}) => {\n  //const {name, email} = isAuthenticated();\n\n  const [profile, setProfile] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    console.dir('componentDidMount');\n  }, [profile]);\n\n  useEffect(() => {\n    (() => {\n      getCurrentProfile();\n    })();\n  }, []);\n\n  const getCurrentProfile = async () => {\n    const token = getCookie('token');\n    console.log('TOKEN RECEIVED:   ', token);\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        }\n      };\n\n      const res = await axios.get('/api/user/profile/me', config);\n\n      const {\n        bio,\n        city,\n        country,\n        dob,\n        handle,\n        location,\n        status,\n        skills,\n        user: { email, name },\n        social: { youtube, linkedin, kingschat, facebook }\n      } = res.data;\n\n      console.log('RESULT:  ', res);\n\n      // setProfile({\n      //   bio,\n      //   city,\n      //   country,\n      //   dob,\n      //   handle,\n      //   location,\n      //   status,\n      //   skills,\n      //   name,\n      //   email,\n      //   youtube,\n      //   linkedin,\n      //   kingschat,\n      //   facebook\n      // });\n      setLoading(false);\n      setProfile({\n        ...profile,\n        bio,\n        city,\n        country,\n        dob,\n        handle,\n        location,\n        status,\n        skills,\n        name,\n        email,\n        youtube,\n        linkedin,\n        kingschat,\n        facebook\n      });\n\n      setError('');\n    } catch (err) {\n      setError(err.response);\n      console.log('SIGNUP ERROR', err.response);\n\n      setLoading(false);\n      setProfile(null);\n    }\n  };\n\n  const providerProfile = useMemo(() => ({ profile, setProfile }), [\n    profile,\n    setProfile\n  ]);\n\n\n  return (\n    <StateProvider>\n      <ProfileContext.Provider value={providerProfile}>\n        <div className=\"page page-dashboard\">\n          <GlobalHeader />\n          <main id=\"user-dashboard\">\n            <Router>\n              <section className=\"user-main\">\n                <Aside className=\"user-aside left-bar\">\n                  <LeftContent />\n                </Aside>\n                <Main className=\"main-content\">{children}</Main>\n                <Aside className=\"user-aside right-bar\">\n                  <TopBar />\n                  <header className=\"header\">\n                    <h3>Schedule</h3>\n                  </header>\n                  <RightContent />\n                  <Log value={profile} />\n                </Aside>\n              </section>\n            </Router>\n          </main>\n        </div>\n      </ProfileContext.Provider>\n    </StateProvider>\n  );\n};\n\nexport default DashboardLayout;\n"],"sourceRoot":""}